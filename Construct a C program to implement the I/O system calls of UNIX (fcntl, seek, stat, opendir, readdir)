#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

int main() {
    // Demonstrate fcntl to set file status flags
    int fileDescriptor = open("example_file.txt", O_RDWR | O_CREAT | O_TRUNC, 0644);
    if (fileDescriptor == -1) {
        perror("Error opening file");
        exit(EXIT_FAILURE);
    }

    // Using fcntl to set the file descriptor to be non-blocking
    int flags = fcntl(fileDescriptor, F_GETFL, 0);
    fcntl(fileDescriptor, F_SETFL, flags | O_NONBLOCK);

    // Write to the file
    write(fileDescriptor, "Hello, UNIX system calls!\n", 26);

    // Using lseek to move the file cursor to the beginning of the file
    lseek(fileDescriptor, 0, SEEK_SET);

    // Read from the file
    char buffer[100];
    read(fileDescriptor, buffer, sizeof(buffer));
    printf("Read from file: %s", buffer);

    // Close the file
    close(fileDescriptor);

    // Demonstrate stat to get file information
    struct stat fileStat;
    if (stat("example_file.txt", &fileStat) == 0) {
        printf("\nFile Size: %lld bytes\n", (long long)fileStat.st_size);
        printf("Number of Links: %ld\n", (long)fileStat.st_nlink);
        printf("File inode: %ld\n", (long)fileStat.st_ino);
    } else {
        perror("Error getting file information");
        exit(EXIT_FAILURE);
    }

    // Demonstrate opendir and readdir to list files in a directory
    DIR *dir;
    struct dirent *dirEntry;

    dir = opendir(".");
    if (dir == NULL) {
        perror("Error opening directory");
        exit(EXIT_FAILURE);
    }

    printf("\nFiles in the current directory:\n");
    while ((dirEntry = readdir(dir)) != NULL) {
        printf("%s\n", dirEntry->d_name);
    }

    closedir(dir);

    return 0;
}
