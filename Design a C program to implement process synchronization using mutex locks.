#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 2
#define NUM_INCREMENTS 1000000

int counter = 0;
pthread_mutex_t mutex;

// Function to increment the shared counter
void *incrementCounter(void *arg) {
    for (int i = 0; i < NUM_INCREMENTS; ++i) {
        // Lock the mutex before accessing the shared counter
        pthread_mutex_lock(&mutex);

        counter++;

        // Unlock the mutex after the increment operation
        pthread_mutex_unlock(&mutex);
    }

    pthread_exit(NULL);
}

int main() {
    // Initialize the mutex
    if (pthread_mutex_init(&mutex, NULL) != 0) {
        perror("Mutex initialization failed");
        exit(EXIT_FAILURE);
    }

    // Create an array of thread IDs
    pthread_t threads[NUM_THREADS];

    // Create two threads
    for (int i = 0; i < NUM_THREADS; ++i) {
        if (pthread_create(&threads[i], NULL, incrementCounter, NULL) != 0) {
            perror("Thread creation failed");
            exit(EXIT_FAILURE);
        }
    }

    // Wait for both threads to finish
    for (int i = 0; i < NUM_THREADS; ++i) {
        pthread_join(threads[i], NULL);
    }

    // Destroy the mutex
    pthread_mutex_destroy(&mutex);

    // Print the final value of the counter
    printf("Final counter value: %d\n", counter);

    return 0;
}
