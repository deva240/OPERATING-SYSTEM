#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t forks[NUM_PHILOSOPHERS];
pthread_t philosophers[NUM_PHILOSOPHERS];

// Function to simulate philosopher thinking
void think(int philosopher_id) {
    printf("Philosopher %d is thinking.\n", philosopher_id);
    usleep(rand() % 1000000);  // Simulate thinking time
}

// Function to simulate philosopher eating
void eat(int philosopher_id) {
    printf("Philosopher %d is eating.\n", philosopher_id);
    usleep(rand() % 1000000);  // Simulate eating time
}

// Function to simulate philosopher grabbing forks
void grab_forks(int philosopher_id) {
    pthread_mutex_lock(&forks[philosopher_id]);
    pthread_mutex_lock(&forks[(philosopher_id + 1) % NUM_PHILOSOPHERS]);
}

// Function to simulate philosopher releasing forks
void release_forks(int philosopher_id) {
    pthread_mutex_unlock(&forks[philosopher_id]);
    pthread_mutex_unlock(&forks[(philosopher_id + 1) % NUM_PHILOSOPHERS]);
}

// Function to simulate the philosopher's behavior
void *philosopher_behavior(void *arg) {
    int philosopher_id = *((int *)arg);

    while (1) {
        think(philosopher_id);
        grab_forks(philosopher_id);
        eat(philosopher_id);
        release_forks(philosopher_id);
    }

    pthread_exit(NULL);
}

int main() {
    // Initialize mutexes for each fork
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        if (pthread_mutex_init(&forks[i], NULL) != 0) {
            printf("Error initializing mutex.\n");
            exit(EXIT_FAILURE);
        }
    }

    // Create threads for each philosopher
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        int *philosopher_id = malloc(sizeof(int));
        *philosopher_id = i;
        if (pthread_create(&philosophers[i], NULL, philosopher_behavior, (void *)philosopher_id) != 0) {
            printf("Error creating philosopher thread.\n");
            exit(EXIT_FAILURE);
        }
    }

    // Wait for all philosopher threads to finish
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; ++i) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
