#include <stdio.h>

// Structure to represent a process
struct Process {
    int id;
    int arrivalTime;
    int burstTime;
    int remainingTime;
};

// Function to simulate the Round Robin scheduling
void roundRobin(struct Process processes[], int n, int quantum) {
    int currentTime = 0;
    int completedProcesses = 0;

    printf("Time\tProcess\n");

    while (completedProcesses < n) {
        for (int i = 0; i < n; i++) {
            // Check if the process has arrived and has remaining execution time
            if (processes[i].arrivalTime <= currentTime && processes[i].remainingTime > 0) {
                // Execute the process for the quantum or its remaining time, whichever is smaller
                int executionTime = (processes[i].remainingTime < quantum) ? processes[i].remainingTime : quantum;

                printf("%d\tP%d\n", currentTime, processes[i].id);

                processes[i].remainingTime -= executionTime;
                currentTime += executionTime;

                // Check if the process is completed
                if (processes[i].remainingTime == 0) {
                    completedProcesses++;
                }
            }
        }
    }
}

int main() {
    // Example processes
    struct Process processes[] = {
        {1, 0, 10, 10},
        {2, 2, 5, 5},
        {3, 4, 8, 8},
        {4, 6, 2, 2}
    };

    int n = sizeof(processes) / sizeof(processes[0]);
    int quantum = 2; // Time quantum

    // Run the Round Robin scheduling algorithm
    roundRobin(processes, n, quantum);

    return 0;
}
